-- Запрос 1
with first_payments as (select user_id
      ,min(date_trunc('day', transaction_datetime)) as first_payment_date
from skyeng_db.payments
Where payment_amount is not null
group by user_id
order by user_id) ,



-- Запрос 2
all_dates as

(select 
     distinct date_trunc ('day', class_start_datetime) as dt
from skyeng_db.classes
Where class_start_datetime between '2015-12-31' and '2017-01-01'),


-- Запрос 3
all_dates_by_user as
(select user_id
        , dt
from first_payments a
    left join all_dates b
     on b.dt >= a.first_payment_date),

 

-- Запрос 4
payments_by_dates as
(select user_id 
       ,date_trunc ('day', transaction_datetime) as payment_date
       ,sum (classes) as transaction_balance_change
from skyeng_db.payments
     Where status_name like 'success'
group by user_id , payment_date
order by 1, 2),

-- В результате получим CTE payments_by_dates с полями: user_id, payment_date, transaction_balance_change (сколько уроков было начислено или списано в этот день)




-- Запрос 5 
-- Найдем баланс студентов, который сформирован только транзакциями. 
-- Для этого объединим all_dates_by_user и payments_by_dates так, чтобы совпадали даты и user_id. 
-- Используем оконные выражения (функцию sum), чтобы найти кумулятивную сумму по полю transaction_balance_change для всех строк до текущей включительно с разбивкой по user_id и сортировкой по dt. 
-- В результате получим CTE payments_by_dates_cumsum с полями: user_id, dt, transaction_balance_change — transaction_balance_change_cs (кумулятивная сумма по transaction_balance_change). 
-- При подсчете кумулятивной суммы можно заменить пустые значения нулями.

payments_by_dates_cumsum as
(select a.user_id 
       ,a.dt
       ,transaction_balance_change
       ,coalesce (sum (transaction_balance_change) over (partition by a.user_id order by a.dt), 0) as transaction_balance_change_cs
from all_dates_by_user a
    left join payments_by_dates b 
        on a.user_id = b.user_id
        and a.dt = b.payment_date
group by a.user_id, a.dt, transaction_balance_change),



-- Запрос 6 

-- Найдем изменения балансов из-за прохождения уроков. 
-- Создадим CTE classes_by_dates, посчитав в таблице classes количество уроков за каждый день для каждого ученика. 
-- Нас не интересуют вводные уроки и уроки со статусом, отличным от success и failed_by_student. 
-- Получим результат с такими полями: user_id, class_date, classes (количество пройденных в этот день уроков). Причем classes мы умножим на -1, чтобы отразить, что - — это списания с баланса.
classes_by_dates as

(select user_id
        , date_trunc ('day', class_start_datetime) as class_date
        , count (*) * -1 as classes
from skyeng_db.classes
Where class_status in ('success', 'failed_by_student')
and class_type != 'trial'
group by 1,2) ,



-- Запрос 7 
-- По аналогии с уже проделанным шагом для оплат создадим CTE для хранения кумулятивной суммы количества пройденных уроков. 
-- Для этого объединим таблицы `all_dates_by_user` и `classes_by_dates` так, чтобы совпадали даты и `user_id`.
-- Используем оконные выражения (функцию `sum`), чтобы найти кумулятивную сумму по полю `classes` для всех строк до текущей включительно с разбивкой по `user_id` и сортировкой по `dt`. 
-- **В результате** получим CTE `classes_by_dates_dates_cumsum`с полями: `user_id`, `dt`, `classes` — `classes_cs`(кумулятивная сумма по `classes`). 
-- При подсчете кумулятивной суммы обязательно нужно заменить пустые значения нулями.

classes_by_dates_dates_cumsum as
(select a.user_id
        , a.dt
        , classes
        , coalesce (sum (classes) over (partition by a.user_id order by dt) , 0) as classes_cs 
from all_dates_by_user a
  left join classes_by_dates b
    on a.user_id = b.user_id 
    and a.dt = b.class_date) 

  
  
-- Запрос 8 

-- Создадим CTE `balances` ****с вычисленными балансами каждого студента. 
-- Для этого объединим таблицы `payments_by_dates_cumsum` ****и `classes_by_dates_dates_cumsum` так, чтобы совпадали даты и `user_id`.
-- **Получим такие поля:** `user_id`, `dt`, `transaction_balance_change`, `transaction_balance_change_cs`, `classes`, `classes_cs`, `balance` (`classes_cs` + `transaction_balance_change_cs`).

select a.* 
      ,classes
      ,classes_cs
      , classes_cs + transaction_balance_change_cs as balance
from payments_by_dates_cumsum a
  right join classes_by_dates_dates_cumsum b
    on a.user_id = b.user_id
    and a.dt = b.dt
    order by 1,2